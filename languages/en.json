{
    "app": {
        "title": "Free Machine Learning",
        "welcome": "Welcome! üéì",
        "description": "This application provides interactive visualizations to understand machine learning concepts. Use the sidebar menu to navigate through sections.",
        "available_sections": "Available sections:",
        "navigation": "Navigation",
        "language": "Language"
    },
    "perceptron": {
        "title": "The Perceptron",
        "description": "The perceptron is a key concept, as modern neural networks use this element as a building block.\n\nIt is a neuron capable of performing binary classification based on linear regression and an activation function.",
        "info_linear_regression": "It's important that you already know linear regression, you can see it in this same project.",
        "equations_title": "Perceptron Equation",
        "perceptron_eq_desc_p1": "The perceptron classifies a point (x‚ÇÅ, x‚ÇÇ) based on this equation:",
        "perceptron_eq_desc_p2": "We'll understand everything in a second, but first let's review this equation:",
        "perceptron_eq_desc_p3": "This equation represents the decision boundary. That is, it divides the data into two sets. And if we move some variables, we can get the line equation:",
        "perceptron_eq_desc_p4": "And remember the line equation.",
        "perceptron_eq_desc_p5": "* The slope **m** is **-w‚ÇÅ/w‚ÇÇ**\n\n* The y-intercept **b** is **-b/w‚ÇÇ**",
        "perceptron_ex": "You can play with the perceptron values to see how the classification changes",
        "activation_title": "Activation Function",
        "activation_text": "Now we can continue with the activation function **f(z)**. This function determines which class each point belongs to.\n\nLet's see its simplest definition:",
        "activation_text_p2": "If the value of **z** is greater than or equal to zero, the function returns 1. If the value of **z** is less than zero, the function returns -1. Let's remember the perceptron equation:",
        "activation_text_p3": "And you could already see this in the previous example. Everything above the decision boundary is of one class, and everything below is of the other.",
        "exercise_title": "Exercises",
        "exercise1_title": "Exercise 1",
        "exercise_desc": "Try to classify these points by adjusting the weights and bias. The goal is to find a line that separates the blue points from the red ones.",
        "weight1": "Weight w1",
        "weight2": "Weight w2",
        "bias": "Bias (b)",
        "class1": "Class 1 (y=1)",
        "class_neg1": "Class -1 (y=-1)",
        "decision_boundary": "Decision boundary",
        "graph_title": "Perceptron Classification and Decision Boundary",
        "exercise_plot_title": "Practical Classification",
        "exercise_success": "Congratulations! You have correctly classified all points.",
        "exercise_continue": "Sometimes not all points can be separated, but the idea is to correctly classify as many as possible.",
        "correct_class1": "Points correctly\n\nclassified (y=1)",
        "correct_class_neg1": "Points correctly\n\nclassified (y=-1)",
        "misclassified": "Misclassified points",
        "exercise2_title": "Exercise 2",
        "exercise2_desc": "Now let's model a logic function. Try to model these functions:",
        "exercise2_or": "OR: when any of the inputs is 1, the output is 1",
        "exercise2_and": "AND: when all inputs are 1, the output is 1",
        "exercise2_nand": "NAND: when all inputs are 1, the output is -1",
        "exercise2_nor": "NOR: when all inputs are -1, the output is 1",
        "exercise2_xor": "XOR: when inputs are different, the output is 1",
        "exercise2_nor_warning": "Watch out! The perceptron cannot model the NOR function, as it is not linearly separable.",
        "exercise2_result": "Result: you are modeling a function:",
        "limitations_title": "Perceptron Limitations",
        "limitations_desc": "The perceptron can only learn Linear patterns, it cannot learn something like this:",
        "limitations_plot_title": "Non-linearly Separable Data",
        "limitations_text": "In this example, we have two classes of points that form a circular pattern. No straight line can separate these points correctly. This is the great limitation of the perceptron that kept it in the limbo of history... until the arrival of the multilayer perceptron and backpropagation.",
        "division_by_zero": "When w‚ÇÇ = 0, the decision boundary becomes a vertical line at x‚ÇÅ = -b/w‚ÇÅ. The line equation cannot be written in slope-intercept form in this case."
    },
    "line_basic": {
        "title": "Remember the basic line",
        "description_p1": "Recall that in a Cartesian plane, we can graph a line following this equation:",
        "description_p2": "The variable **y** is represented on the vertical axis, while the variable **x** is on the horizontal axis. The slope **m** determines the line's inclination, while **b** is the point where the line cuts the **y** axis.",
        "exercise_desc": "You can play with the sliders to see how the slope **m** and intercept **b** affect the line",
        "slope": "Slope (m)",
        "intercept": "Y-intercept (b)",
        "plot_title": "Line Equation: y = mx + b"
    },
    "linear_regression": {
        "title": "Linear Regression",
        "description_p1": "Linear regression is an easy-to-understand algorithm. We consider that the relationship between two variables can be seen as a straight line.",
        "ex_title": "Example of a real scenario",
        "ex_desc_p1": "Imagine we want to predict a person's height (young) based on their age. We can use linear regression to find a line that fits the data.",
        "ex_desc_p2": "In this case, the independent variable **x** is age and the dependent variable **y** is height.",
        "ex_interactive_desc": "You can play with the sliders to find a line that can model the data.",
        "ex_plot_title": "Linear Regression Example using person's height",
        "ex_plot_x_label": "Age (years)",
        "ex_plot_y_label": "Height (cm)",
        "ex_rmse": "Root Mean Squared Error (RMSE):",
        "ex_hint": "Hint: Try to minimize the Error value (RMSE)",
        "error_eq_title": "How do we measure error?",
        "error_eq_desc_p1": "To know if our model is good, we measure the distance between predicted values and real values.",
        "error_eq_desc_p2": "And that represents the Mean Squared Error (MSE):",
        "error_eq_params": "‚Ä¢ Where **n** is the number of points\n\n‚Ä¢ **y·µ¢** is the real value for point i\n\n‚Ä¢ **≈∑·µ¢** is the predicted value for point i\n\n‚Ä¢ And the lower the MSE, the better the fit.",
        "error_eq_desc_p3": "Note that we measure the difference between the real value **y·µ¢** and the predicted value **≈∑·µ¢** for each point **i**.",
        "error_eq_desc_p4": "Squaring the difference has two consequences:",
        "error_eq_desc_p5": "1. Large errors are more important than small errors\n\n2. The difference is always positive, so it doesn't matter if the model predicts more or less than the real value, the error will be positive.",
        "error_eq_desc_p6": "This value can be square rooted to get the error in the same units as the real values.",
        "slope": "Slope (m)",
        "intercept": "Y-intercept (b)",
        "best_fit": "Best Fit Line",
        "data_points": "Data Points",
        "error_lines": "Error Lines",
        "show_errors": "Show error lines",
        "plot_title": "Linear Regression Line and Data Points",
        "explanation_title": "Understanding Linear Regression",
        "explanation_text": "‚Ä¢ We assume there is a linear relationship between two variables.\n\n‚Ä¢ The easiest way to perceive a linear relationship is to graph the values on a Cartesian plane.\n\n‚Ä¢ No model is perfect, there will always be some error because the real world doesn't have straight lines.\n\n‚Ä¢ If you want to use this model properly, I recommend delving into these concepts: normal distribution, correlation, and ordinary least squares (for math lovers).\n\n‚Ä¢ Finally, if you want to implement this model, it's as easy as using a Python library, the hard part is understanding the theory.",
        "limitations_title": "Limitations",
        "limitations_text": "There are other relationships in the real world that don't follow a straight line, for example:"
    },
    "books": {
        "title": "Support the Project",
        "description": "If you find this educational platform helpful, you can support its development by purchasing one of my technical books:",
        "neural_networks": {
            "title": "Trapped in Neural Networks",
            "description": "A book where I share my experience working in the world of artificial intelligence. I talk a bit about technology, but above all, I want to tell a story that guides new students who want to enter this world.",
            "price": "$5.99"
        },
        "competitive_programming": {
            "title": "A Very Complex World",
            "description": "A popular science book about competitive programming. I'll teach you the fundamentals to reason like the world's best programmers.",
            "price": "$6.99"
        },
        "thank_you": "Thank you for your support!",
        "note": "Note: These books are available in Spanish."
    }
} 